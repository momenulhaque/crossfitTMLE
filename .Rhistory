document()
document()
document()
document()
check()
statin_sim_data
L <- names(dplyr::select(statin_sim_data, !c(Y, statin)))
L
DC_tmle <- crossfitTMLE(data = statin_sim_data,
exposure = "statin",
outcome = "Y",
covarsT = L,
covarsO = L,
family.y = "binomial",
learners = "SL.glmn",
control = list(V = 5, stratifyCV = FALSE,
shuffle = TRUE, validRows = NULL),
num_cf = 5,
n_split = 3,
seed = 2575,
conf.level = 0.95, stat = "median")
DC_tmle
DC_tmle <- crossfitTMLE(data = statin_sim_data,
exposure = "statin",
outcome = "Y",
covarsT = L,
covarsO = L,
family.y = "binomial",
learners = "SL.glm",
control = list(V = 5, stratifyCV = FALSE,
shuffle = TRUE, validRows = NULL),
num_cf = 5,
n_split = 3,
seed = 2575,
conf.level = 0.95, stat = "median")
DC_tmle
library(parallel)
detectCores()
dc_fit <- list()
ObsData = gen.data(n=500, do.pop=F, do.misp=T, my.transform=T)
for(i in 1:20){
ObsData = gen.data(n=500, do.pop=F, do.misp=T, my.transform=T)
ObsData$sim_id = i
}
dc_fit <- list()
for(i in 1:20){
set.seed(i)
dat = ObsData[ObsData$sim_id == i, ]
fit[[i]] = tmle_sim(ObsData, seed=i)
dc_fit[[i]] = crossfitTMLE(data=dat,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=i,
conf.level=0.96,
stat = "median")
}
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
ObsDat
cfTMLE = function(df, id){
crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
cl = makeCluster(50)
cl = makeCluster(20)
res = clusterMap(cl, function(df, id) cfTMLE(df=Dat, id=sim_id), df=ObsDat$data, id=ObsDat$sim_id)
clusterEvalQ(cl, {
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
library(dplyr)
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(plyr)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(purrr)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
install.packages("plyr")
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(purrr)
library(plyr)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
library(tidyr)
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(purrr)
library(plyr)
library(tidyr)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
ObsData
ObsData <- list()
ObsData <- list()
for(i in 1:20){
ObsData[[i]] = gen.data(n=500, do.pop=F, do.misp=T, my.transform=T)
ObsData[[i]]$sim_id = i
}
ObsData <- bind_rows(ObsData)
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(purrr)
library(plyr)
library(tidyr)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
ObsData
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(purrr)
library(plyr)
library(tidyr)
ObsData <- list()
for(i in 1:20){
ObsData[[i]] = gen.data(n=500, do.pop=F, do.misp=T, my.transform=T)
ObsData[[i]]$sim_id = i
}
ObsData <- bind_rows(ObsData)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(purrr)
library(plyr)
library(tidyr)
gen.data <- function(n, do.pop=F, do.misp=F, my.transform=F){
C1 <- rnorm(n,0,1)
C2 <- rnorm(n,0,1)
C3 <- rnorm(n,0,1)
C4 <- rnorm(n,0,1)
pscore <- plogis(-1 +log(1.75)*(C1+C2+C3+C4) )
X <- rbinom(n, 1, pscore)
eps <- rnorm(n,0,6)
get.Y <- function(C1,C2,C3,C4,X,eps){
120+6*X+3*(C1+C2+C3+C4)+eps
}
Y1 <- get.Y(C1,C2,C3,C4,X=1,eps)
Y0 <- get.Y(C1,C2,C3,C4,X=0,eps)
Y <- get.Y(C1,C2,C3,C4,X,eps)
if(do.pop){
# return the pscore & counterfactual outcomes
yay <- data.frame(cbind(pscore, Y1,Y0))
} else {
if(do.misp & my.transform){
# BALZER & WESTLING transformation of the confounders
C1 <- exp(C1/2)
C2 <- C2/(1+exp(C1)) + 10
C3 <- (C1*C3/25 + 0.6)^3
C4 <- (C2 + C4 + 20)^2
} else if (do.misp & !my.transform){
# NAIMI et al. transformation of the confounders
Z1 <- C1
Z2 <- C2
Z3 <- C3
Z4 <- C4
C1 <- exp(Z1/2)
C2 <- Z2/(1+exp(Z1)) + 10
C3 <- (Z1*Z3/25 + 0.6)^3
C4 <- (Z2 + Z4 + 20)^2
}
# return observed data
yay <- data.frame(cbind(C1,C2,C3,C4,X,Y))
}
yay
}
ObsData <- list()
for(i in 1:20){
ObsData[[i]] = gen.data(n=500, do.pop=F, do.misp=T, my.transform=T)
ObsData[[i]]$sim_id = i
}
ObsData <- bind_rows(ObsData)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
cl = makeCluster(20)
res = clusterMap(cl, function(df, id) cfTMLE(df=Dat, id=sim_id), df=ObsDat$data, id=ObsDat$sim_id)
clusterEvalQ(cl, {
library(dplyr)
library(SuperLearner)
library(purrr)
library(plyr)
library(tidyr)
gen.data <- function(n, do.pop=F, do.misp=F, my.transform=F){
C1 <- rnorm(n,0,1)
C2 <- rnorm(n,0,1)
C3 <- rnorm(n,0,1)
C4 <- rnorm(n,0,1)
pscore <- plogis(-1 +log(1.75)*(C1+C2+C3+C4) )
X <- rbinom(n, 1, pscore)
eps <- rnorm(n,0,6)
get.Y <- function(C1,C2,C3,C4,X,eps){
120+6*X+3*(C1+C2+C3+C4)+eps
}
Y1 <- get.Y(C1,C2,C3,C4,X=1,eps)
Y0 <- get.Y(C1,C2,C3,C4,X=0,eps)
Y <- get.Y(C1,C2,C3,C4,X,eps)
if(do.pop){
# return the pscore & counterfactual outcomes
yay <- data.frame(cbind(pscore, Y1,Y0))
} else {
if(do.misp & my.transform){
# BALZER & WESTLING transformation of the confounders
C1 <- exp(C1/2)
C2 <- C2/(1+exp(C1)) + 10
C3 <- (C1*C3/25 + 0.6)^3
C4 <- (C2 + C4 + 20)^2
} else if (do.misp & !my.transform){
# NAIMI et al. transformation of the confounders
Z1 <- C1
Z2 <- C2
Z3 <- C3
Z4 <- C4
C1 <- exp(Z1/2)
C2 <- Z2/(1+exp(Z1)) + 10
C3 <- (Z1*Z3/25 + 0.6)^3
C4 <- (Z2 + Z4 + 20)^2
}
# return observed data
yay <- data.frame(cbind(C1,C2,C3,C4,X,Y))
}
yay
}
ObsData <- list()
for(i in 1:20){
ObsData[[i]] = gen.data(n=500, do.pop=F, do.misp=T, my.transform=T)
ObsData[[i]]$sim_id = i
}
library(crossfitTMLE)
ObsData <- bind_rows(ObsData)
ObsDat = ObsData %>% group_by(sim_id) %>% nest()
cfTMLE = function(df, id){
crossfitTMLE::crossfitTMLE(data=df,
exposure="X",
outcome="Y",
covarsT=c("C1", "C2", "C3", "C4"),
covarsO=c("C1", "C2", "C3", "C4"),
family.y="gaussian",
learners=c("SL.glm.dcTMLE"),
control=list(V = 3, stratifyCV = FALSE, shuffle = TRUE, validRows = NULL),
num_cf=4,
n_split=3,
rand_split=FALSE,
Qbounds = 1-0.9995,
gbounds = NULL,
seed=id,
conf.level=0.96,
stat = "median")
}
})
ObsDat_y <- ObsDat_n <- list()
ObsDat_y <- ObsDat_n <- list()
for(i in 1:1000){
Dat_y = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_n = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_y$sim_id = i
Dat_n$sim_id = i
ObsDat_y[[i]] <- Dat_y
ObsDat_n[[i]] <- Dat_n
}
ObsDat_y = ObsDat_y %>% group_by(sim_id) %>% nest()
ObsDat_y = bind_rows(ObsDat_y)
ObsDat_n = bind_rows(ObsDat_n)
ObsDat_y = ObsDat_y %>% group_by(sim_id) %>% nest()
ObsDat_y <- ObsDat_n <- list()
for(i in 1:1000){
Dat_y = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_n = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_y$sim_id = i
Dat_n$sim_id = i
ObsDat_y[[i]] <- Dat_y
ObsDat_n[[i]] <- Dat_n
}
ObsDat_y = bind_rows(ObsDat_y)
ObsDat_n = bind_rows(ObsDat_n)
ObsDat_y = ObsDat_y %>% group_by(sim_id) %>% nest()
ObsDat_n = ObsDat_n %>% group_by(sim_id) %>% nest()
getwd()
saveRDS(ObsDat_y, "ObsDat_y.rds")
saveRDS(ObsDat_n, "ObsDat_n.rds")
ObsDat_y
ObsDat_y
#
#
ObsDat_y <- ObsDat_n <- list()
for(i in 1:1000){
Dat_y = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_n = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_y$sim_id = i
Dat_n$sim_id = i
ObsDat_y[[i]] <- Dat_y
ObsDat_n[[i]] <- Dat_n
}
#
ObsDat_y = bind_rows(ObsDat_y)
ObsDat_n = bind_rows(ObsDat_n)
# #
# #
# ObsDat_y = ObsDat_y %>% group_by(sim_id) %>% nest()
# ObsDat_n = ObsDat_n %>% group_by(sim_id) %>% nest()
# #
#
saveRDS(ObsDat_y, "ObsDat_y.rds")
saveRDS(ObsDat_n, "ObsDat_n.rds")
# ObsDat_y <- ObsDat_n <- list()
# for(i in 1:1000){
#   Dat_y = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
#   Dat_n = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
#   Dat_y$sim_id = i
#   Dat_n$sim_id = i
#   ObsDat_y[[i]] <- Dat_y
#   ObsDat_n[[i]] <- Dat_n
# }
# #
# #
# #
ObsDat_y <- ObsDat_n <- list()
for(i in 1:1000){
Dat_y = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_n = gen.data(n=1200, do.pop=F, do.misp=T, my.transform=T)
Dat_y$sim_id = i
Dat_n$sim_id = i
ObsDat_y[[i]] <- Dat_y
ObsDat_n[[i]] <- Dat_n
}
ObsDat_y = bind_rows(ObsDat_y)
ObsDat_n = bind_rows(ObsDat_n)
ObsDat_y
# # #
# # #
# # ObsDat_y = ObsDat_y %>% group_by(sim_id) %>% nest()
# # ObsDat_n = ObsDat_n %>% group_by(sim_id) %>% nest()
# # #
# #
saveRDS(ObsDat_y, "ObsDat_y.rds")
saveRDS(ObsDat_n, "ObsDat_n.rds")
